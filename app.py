import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import calendar
from datetime import datetime, date, timedelta
from google.oauth2 import service_account
from googleapiclient.discovery import build

# ---------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
# ---------------------------
st.set_page_config(
    page_title="–í–∏—Ä–æ–±–Ω–∏—á–∞ –∑–≤—ñ—Ç–Ω—ñ—Å—Ç—å",
    page_icon="üìä",
    layout="wide",
)

# ---------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets
# ---------------------------
SHEET_ID = "1cbQtfwOR32_J7sIGuZnqmEINKrc1hqcAwAZVmOADPMA"
SCOPES = ["https://www.googleapis.com/auth/spreadsheets.readonly"]

credentials = service_account.Credentials.from_service_account_info(
    st.secrets["gcp_service_account"], scopes=SCOPES
)
service = build("sheets", "v4", credentials=credentials)

# ---------------------------
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–ª–æ–Ω–∫–∏ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏ –æ—à–∏–±–æ–∫
# ---------------------------
def find_percentage_column(columns, target_type="–≤—Ç—Ä–∞—Ç"):
    """
    –ò—â–µ—Ç –∫–æ–ª–æ–Ω–∫—É —Å –∏–º–µ–Ω–µ–º "–í—ñ–¥—Å–æ—Ç–æ–∫ –≤—Ç—Ä–∞—Ç" –∏–ª–∏ "–í—ñ–¥—Å–æ—Ç–æ–∫ –±—Ä–∞–∫—É" (–∏–≥–Ω–æ—Ä–∏—Ä—É—è –ø—Ä–æ–±–µ–ª—ã –∏ —Ä–µ–≥–∏—Å—Ç—Ä).
    """
    target_map = {
        "–≤—Ç—Ä–∞—Ç": ["–≤—ñ–¥—Å–æ—Ç–æ–∫–≤—Ç—Ä–∞—Ç", "–≤—Ç—Ä–∞—Ç", "–≤—ñ–¥—Å–æ—Ç–æ–∫–≤—Ç—Ä–∞—Ç%", "–≤—Ç—Ä–∞—Ç%"],
        "–±—Ä–∞–∫—É": ["–≤—ñ–¥—Å–æ—Ç–æ–∫–±—Ä–∞–∫—É", "–±—Ä–∞–∫—É", "–≤—ñ–¥—Å–æ—Ç–æ–∫–±—Ä–∞–∫—É%", "–±—Ä–∞–∫—É%"]
    }
    
    targets = target_map.get(target_type, target_map["–≤—Ç—Ä–∞—Ç"])
    
    for col in columns:
        col_normalized = col.strip().lower().replace(" ", "").replace("%", "")
        if col_normalized in targets:
            return col
    return None

# ---------------------------
# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
# ---------------------------
def convert_numeric_columns(df, columns):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —á–∏—Å–ª–æ–≤—ã–µ, –∑–∞–º–µ–Ω—è—è –∑–∞–ø—è—Ç—ã–µ –Ω–∞ —Ç–æ—á–∫–∏.
    """
    for col in columns:
        if col in df.columns:
            if df[col].dtype == object:  # –ï—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∞ —Å—Ç—Ä–æ–∫–æ–≤–∞—è
                df[col] = df[col].astype(str).str.replace(",", ".")
                df[col] = pd.to_numeric(df[col], errors="coerce")
            else:
                df[col] = pd.to_numeric(df[col], errors="coerce")
    return df

# ---------------------------
# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ª–∏—Å—Ç—É
# ---------------------------
@st.cache_data
def load_data(sheet_name):
    try:
        sheet = service.spreadsheets()
        result = sheet.values().get(spreadsheetId=SHEET_ID, range=sheet_name).execute()
        values = result.get("values", [])
        if not values:
            st.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ Google Sheets!")
            return pd.DataFrame()
        
        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame(values[1:], columns=values[0])
        df.columns = df.columns.str.strip()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫, —á—Ç–æ–±—ã —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∏–º–µ–Ω–∞
        column_mapping = {
            "–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è": "–¢–∏–ø –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è",
            "–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞": "–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç—É",
            "–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞": "–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
            "–í—Ä–µ–º—è –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—é": "–ß–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—é",
            "–ü—Ä–æ—Ü–µ–Ω—Ç –±—Ä–∞–∫–∞": "–í—ñ–¥—Å–æ—Ç–æ–∫ –±—Ä–∞–∫—É"
        }
        
        for old_col, new_col in column_mapping.items():
            if old_col in df.columns and new_col not in df.columns:
                df.rename(columns={old_col: new_col}, inplace=True)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã
        if "–î–∞—Ç–∞" in df.columns:
            df["–î–∞—Ç–∞"] = pd.to_datetime(df["–î–∞—Ç–∞"], format="%d.%m.%Y", errors="coerce")
        elif all(col in df.columns for col in ["–î–µ–Ω—å", "–ú—ñ—Å—è—Ü—å", "–†—ñ–∫"]):
            # –ï—Å–ª–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç–∞ —Ä–∞–∑–±–∏—Ç–∞ –Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∏–µ —á–∞—Å—Ç–∏, —Å–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫—É –î–∞—Ç–∞
            df["–î–∞—Ç–∞"] = pd.to_datetime(
                df["–î–µ–Ω—å"].astype(str) + "." + df["–ú—ñ—Å—è—Ü—å"].astype(str) + "." + df["–†—ñ–∫"].astype(str),
                format="%d.%m.%Y", errors="coerce"
            )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        numeric_cols = ["–ß–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—é", "–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑–∞ –≥–æ–¥–∏–Ω—É", "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤"]
        df = convert_numeric_columns(df, numeric_cols)
        
        # –ü–æ–∏—Å–∫ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–æ–Ω–∫–∏ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏ –æ—à–∏–±–æ–∫ (–º–æ–∂–µ—Ç –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è "–í—ñ–¥—Å–æ—Ç–æ–∫ –≤—Ç—Ä–∞—Ç" –∏–ª–∏ "–í—ñ–¥—Å–æ—Ç–æ–∫ –±—Ä–∞–∫—É")
        loss_col = find_percentage_column(df.columns, "–≤—Ç—Ä–∞—Ç")
        if loss_col:
            df = convert_numeric_columns(df, [loss_col])
            if "–í—ñ–¥—Å–æ—Ç–æ–∫ –≤—Ç—Ä–∞—Ç" not in df.columns:
                df["–í—ñ–¥—Å–æ—Ç–æ–∫ –≤—Ç—Ä–∞—Ç"] = df[loss_col]
        
        defect_col = find_percentage_column(df.columns, "–±—Ä–∞–∫—É")
        if defect_col:
            df = convert_numeric_columns(df, [defect_col])
            if "–í—ñ–¥—Å–æ—Ç–æ–∫ –±—Ä–∞–∫—É" not in df.columns:
                df["–í—ñ–¥—Å–æ—Ç–æ–∫ –±—Ä–∞–∫—É"] = df[defect_col]
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ä–µ–º–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if "–û–±'—î–º" in df.columns:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "50–º–ª" -> 50)
            df["–û–±'—î–º_—á–∏—Å–ª–æ"] = df["–û–±'—î–º"].str.extract(r'(\d+(?:\.\d+)?)').astype(float)
        
        return df
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: {str(e)}")
        return pd.DataFrame()

# ---------------------------
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ—Å–µ—Ç-–ø–µ—Ä–∏–æ–¥–∞
# ---------------------------
def get_preset_dates(preset):
    today = date.today()
    if preset == "–¶–µ–π —Ç–∏–∂–¥–µ–Ω—å":
        start = today - timedelta(days=today.weekday())
        end = start + timedelta(days=6)
    elif preset == "–ú–∏–Ω—É–ª–∏–π —Ç–∏–∂–¥–µ–Ω—å":
        start = today - timedelta(days=today.weekday() + 7)
        end = start + timedelta(days=6)
    elif preset == "–¶–µ–π –º—ñ—Å—è—Ü—å":
        start = date(today.year, today.month, 1)
        last_day = calendar.monthrange(today.year, today.month)[1]
        end = date(today.year, today.month, last_day)
    elif preset == "–ú–∏–Ω—É–ª–∏–π –º—ñ—Å—è—Ü—å":
        if today.month == 1:
            year = today.year - 1
            month = 12
        else:
            year = today.year
            month = today.month - 1
        start = date(year, month, 1)
        last_day = calendar.monthrange(year, month)[1]
        end = date(year, month, last_day)
    else:
        start, end = None, None
    return start, end

# ---------------------------
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–ø—è—Ç–Ω–∏—Ü–∞)
# ---------------------------
def count_working_days(start, end):
    num = 0
    current = start
    while current <= end:
        if current.weekday() < 5:
            num += 1
        current += timedelta(days=1)
    return num

# ---------------------------
# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
# ---------------------------
sheet_name = "–≤–∞—Ä–∫–∞"
df = load_data(sheet_name)

if df.empty:
    st.warning("–î–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ –∞–±–æ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ.")
else:
    # ---------------------------
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å: –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞ –∏ —Ñ–∏–ª—å—Ç—Ä—ã
    # ---------------------------
    st.sidebar.title("–§—ñ–ª—å—Ç—Ä–∏")
    
    report_type = st.sidebar.selectbox(
        "–¢–∏–ø –∑–≤—ñ—Ç—É",
        options=[
            "–ó–∞–≥–∞–ª—å–Ω–∏–π –æ–≥–ª—è–¥",
            "–ê–Ω–∞–ª—ñ–∑ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤",
            "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è",
            "–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞",
            "–ê–Ω–∞–ª—ñ–∑ —è–∫–æ—Å—Ç—ñ —Ç–∞ –≤—Ç—Ä–∞—Ç",
            "–¢—Ä–µ–Ω–¥ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è"
        ]
    )
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –ø–µ—Ä–∏–æ–¥—É - –ø—Ä–µ—Å–µ—Ç—ã –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤—ã–±–æ—Ä
    preset_options = ["–¶–µ–π —Ç–∏–∂–¥–µ–Ω—å", "–¶–µ–π –º—ñ—Å—è—Ü—å", "–ú–∏–Ω—É–ª–∏–π —Ç–∏–∂–¥–µ–Ω—å", "–ú–∏–Ω—É–ª–∏–π –º—ñ—Å—è—Ü—å", "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏–π"]
    selected_preset = st.sidebar.radio("–í–∏–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥", preset_options, index=0)
    
    if selected_preset != "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏–π":
        start_date, end_date = get_preset_dates(selected_preset)
        st.sidebar.write(f"–ü–µ—Ä—ñ–æ–¥: {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}")
    else:
        if pd.notnull(df["–î–∞—Ç–∞"].min()) and pd.notnull(df["–î–∞—Ç–∞"].max()):
            min_date = df["–î–∞—Ç–∞"].min().date()
            max_date = df["–î–∞—Ç–∞"].max().date()
        else:
            min_date = max_date = date.today()
        date_cols = st.sidebar.columns(2)
        start_date = date_cols[0].date_input("–ù–∞—á–∞–ª–æ –ø–µ—Ä—ñ–æ–¥—É", min_date, min_value=min_date, max_value=max_date)
        end_date = date_cols[1].date_input("–ö—ñ–Ω–µ—Ü—å –ø–µ—Ä—ñ–æ–¥—É", max_date, min_value=min_date, max_value=max_date)
    
    if start_date > end_date:
        st.sidebar.error("–ù–∞—á–∞–ª–æ –ø–µ—Ä—ñ–æ–¥—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø—ñ–∑–Ω—ñ—à–µ, –Ω—ñ–∂ –∫—ñ–Ω–µ—Ü—å.")
        filtered_df = pd.DataFrame()
    else:
        filtered_df = df[(df["–î–∞—Ç–∞"] >= pd.to_datetime(start_date)) & (df["–î–∞—Ç–∞"] <= pd.to_datetime(end_date))]
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    st.sidebar.markdown("---")
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É (–µ—Å–ª–∏ –∏–º–µ—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ)
    unique_products = sorted(filtered_df["–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç—É"].dropna().unique().tolist())
    if unique_products:
        all_products = ["–£—Å—ñ"] + unique_products
        selected_products = st.sidebar.multiselect("–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–¥—É–∫—Ç", options=all_products, default=["–£—Å—ñ"])
        if "–£—Å—ñ" not in selected_products:
            filtered_df = filtered_df[filtered_df["–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç—É"].isin(selected_products)]
    else:
        st.sidebar.info("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –∑–∞ –≤–∏–±—Ä–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥.")
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é (–µ—Å–ª–∏ –∏–º–µ—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ)
    unique_equipments = sorted(filtered_df["–¢–∏–ø –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è"].dropna().unique().tolist())
    if unique_equipments:
        all_equipments = ["–£—Å—ñ"] + unique_equipments
        selected_equipments = st.sidebar.multiselect("–û–±–µ—Ä—ñ—Ç—å –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è", options=all_equipments, default=["–£—Å—ñ"])
        if "–£—Å—ñ" not in selected_equipments:
            filtered_df = filtered_df[filtered_df["–¢–∏–ø –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è"].isin(selected_equipments)]
    else:
        st.sidebar.info("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è –∑–∞ –≤–∏–±—Ä–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥.")
    
    # –§–∏–ª—å—Ç—Ä –ø–æ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—É (–µ—Å–ª–∏ –∏–º–µ—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ)
    unique_employees = sorted(filtered_df["–ü–Ü–ë"].dropna().unique().tolist())
    if unique_employees:
        selected_employee = st.sidebar.selectbox("–û–±–µ—Ä—ñ—Ç—å —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞", options=["–£—Å—ñ"] + unique_employees)
        if selected_employee != "–£—Å—ñ":
            filtered_df = filtered_df[filtered_df["–ü–Ü–ë"] == selected_employee]
    else:
        st.sidebar.info("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ –∑–∞ –≤–∏–±—Ä–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥.")
    
    # ---------------------------
    # –ö–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    # ---------------------------
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    st.title("üìä –í–∏—Ä–æ–±–Ω–∏—á–∞ –∑–≤—ñ—Ç–Ω—ñ—Å—Ç—å - –í–∞—Ä–∫–∞")
    st.markdown("---")
    
    # –û–±—â–∏–µ KPI –¥–ª—è –≤—Å–µ—Ö –æ—Ç—á–µ—Ç–æ–≤
    total_batches = len(filtered_df)
    avg_loss = filtered_df["–í—ñ–¥—Å–æ—Ç–æ–∫ –≤—Ç—Ä–∞—Ç"].mean() if total_batches > 0 and "–í—ñ–¥—Å–æ—Ç–æ–∫ –≤—Ç—Ä–∞—Ç" in filtered_df.columns else 0
    avg_time = filtered_df["–ß–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—é"].mean() if total_batches > 0 and "–ß–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—é" in filtered_df.columns else 0
    unique_emp_count = filtered_df["–ü–Ü–ë"].nunique() if total_batches > 0 and "–ü–Ü–ë" in filtered_df.columns else 0
    avg_ops_per_employee = total_batches / unique_emp_count if unique_emp_count > 0 else 0
    
    col1, col2, col3, col4 = st.columns(4)
    col1.metric("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ–π", total_batches)
    col2.metric("–°–µ—Ä–µ–¥–Ω—ñ–π % –≤—Ç—Ä–∞—Ç", f"{avg_loss:.2f}%" if total_batches > 0 else "0%")
    col3.metric("–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –æ–ø–µ—Ä–∞—Ü—ñ—ó", f"{avg_time:.2f} —Ö–≤")
    col4.metric("–û–ø–µ—Ä–∞—Ü—ñ–π –Ω–∞ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞", f"{avg_ops_per_employee:.2f}" if total_batches > 0 else "0")
    
    # –û—Ç—á–µ—Ç—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–∏–ø—É
    if report_type == "–ó–∞–≥–∞–ª—å–Ω–∏–π –æ–≥–ª—è–¥":
        st.subheader("–ó–∞–≥–∞–ª—å–Ω–∏–π –æ–≥–ª—è–¥ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞")
        
        # –ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–¥–æ–≤ –ø–æ –¥–Ω—è–º
        if not filtered_df.empty:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –∞–≥—Ä–µ–≥–∞—Ü–∏–π —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–ª–æ–Ω–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            agg_dict = {}
            if "–ß–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—é" in filtered_df.columns:
                agg_dict["–ß–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—é"] = "mean"
            if "–í—ñ–¥—Å–æ—Ç–æ–∫ –≤—Ç—Ä–∞—Ç" in filtered_df.columns:
                agg_dict["–í—ñ–¥—Å–æ—Ç–æ–∫ –≤—Ç—Ä–∞—Ç"] = "mean"
            
            # –î–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–ø–µ—Ä–∞—Ü–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º size()
            trend_count = filtered_df.groupby("–î–∞—Ç–∞").size().reset_index(name="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ–π")
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –º–µ—Ç—Ä–∏–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
            if agg_dict:
                trend_metrics = filtered_df.groupby("–î–∞—Ç–∞", as_index=False).agg(agg_dict)
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                trend_data = pd.merge(trend_count, trend_metrics, on="–î–∞—Ç–∞", how="left")
            else:
                trend_data = trend_count
                
            tabs = st.tabs(["–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ–π", "–ß–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—é", "–í—Ç—Ä–∞—Ç–∏"])
            
            with tabs[0]:
                fig1 = px.bar(
                    trend_data,
                    x="–î–∞—Ç–∞",
                    y="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ–π",
                    title="–î–∏–Ω–∞–º—ñ–∫–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –æ–ø–µ—Ä–∞—Ü—ñ–π",
                    color_discrete_sequence=["#3498DB"]
                )
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é –ª–∏–Ω–∏—é
                avg_ops = trend_data["–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ–π"].mean()
                fig1.add_hline(
                    y=avg_ops, 
                    line_dash="dash", 
                    line_color="red",
                    annotation_text=f"–°–µ—Ä–µ–¥–Ω—è: {avg_ops:.1f}",
                    annotation_position="top right"
                )
                fig1.update_layout(
                    plot_bgcolor='rgba(240,240,240,0.8)',
                    xaxis=dict(showgrid=True, gridwidth=1, gridcolor='rgba(220,220,220,0.8)'),
                    yaxis=dict(showgrid=True, gridwidth=1, gridcolor='rgba(220,220,220,0.8)')
                )
                st.plotly_chart(fig1, use_container_width=True)
            
            with tabs[1]:
                if "–ß–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—é" in trend_data.columns:
                    fig2 = px.line(
                        trend_data,
                        x="–î–∞—Ç–∞",
                        y="–ß–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—é",
                        title="–î–∏–Ω–∞–º—ñ–∫–∞ —á–∞—Å—É –æ–ø–µ—Ä–∞—Ü—ñ–π",
                        markers=True
                    )
                    fig2.update_traces(line=dict(width=3, color="#2E86C1"), marker=dict(size=10))
                    fig2.update_layout(
                        plot_bgcolor='rgba(240,240,240,0.8)',
                        xaxis=dict(showgrid=True, gridwidth=1, gridcolor='rgba(220,220,220,0.8)'),
                        yaxis=dict(showgrid=True, gridwidth=1, gridcolor='rgba(220,220,220,0.8)')
                    )
                    st.plotly_chart(fig2, use_container_width=True)
                else:
                    st.warning("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ —á–∞—Å –æ–ø–µ—Ä–∞—Ü—ñ–π.")
            
            with tabs[2]:
                if "–í—ñ–¥—Å–æ—Ç–æ–∫ –≤—Ç—Ä–∞—Ç" in trend_data.columns:
                    fig3 = px.line(
                        trend_data,
                        x="–î–∞—Ç–∞",
                        y="–í—ñ–¥—Å–æ—Ç–æ–∫ –≤—Ç—Ä–∞—Ç",
                        title="–î–∏–Ω–∞–º—ñ–∫–∞ –≤—ñ–¥—Å–æ—Ç–∫—É –≤—Ç—Ä–∞—Ç",
                        markers=True
                    )
                    fig3.update_traces(line=dict(width=3, color="#E74C3C"), marker=dict(size=10))
                    fig3.update_layout(
                        plot_bgcolor='rgba(240,240,240,0.8)',
                        xaxis=dict(showgrid=True, gridwidth=1, gridcolor='rgba(220,220,220,0.8)'),
                        yaxis=dict(showgrid=True, gridwidth=1, gridcolor='rgba(220,220,220,0.8)')
                    )
                    st.plotly_chart(fig3, use_container_width=True)
                else:
                    st.warning("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –≤—ñ–¥—Å–æ—Ç–æ–∫ –≤—Ç—Ä–∞—Ç.")
        else:
            st.warning("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç—Ä–µ–Ω–¥—ñ–≤.")
            
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é
        cols = st.columns(2)
        
        with cols[0]:
            st.subheader("–†–æ–∑–ø–æ–¥—ñ–ª –ø–æ —Ç–∏–ø—É –ø—Ä–æ–¥—É–∫—Ç—É")
            if "–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç—É" in filtered_df.columns and not filtered_df.empty:
                prod_count = filtered_df.groupby("–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç—É").size().reset_index(name="–ö—ñ–ª—å–∫—ñ—Å—Ç—å")
                fig_prod = px.pie(
                    prod_count,
                    names="–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç—É",
                    values="–ö—ñ–ª—å–∫—ñ—Å—Ç—å",
                    title="–†–æ–∑–ø–æ–¥—ñ–ª –æ–ø–µ—Ä–∞—Ü—ñ–π –∑–∞ —Ç–∏–ø–æ–º –ø—Ä–æ–¥—É–∫—Ç—É",
                    color_discrete_sequence=px.colors.qualitative.Pastel,
                    hole=0.4
                )
                fig_prod.update_traces(textposition='inside', textinfo='percent+label')
                fig_prod.update_layout(legend=dict(orientation="h", y=-0.2))
                st.plotly_chart(fig_prod, use_container_width=True)
            else:
                st.warning("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ —Ç–∏–ø–∏ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤.")
        
        with cols[1]:
            st.subheader("–†–æ–∑–ø–æ–¥—ñ–ª –ø–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—é")
            if "–¢–∏–ø –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è" in filtered_df.columns and not filtered_df.empty:
                eq_count = filtered_df.groupby("–¢–∏–ø –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è").size().reset_index(name="–ö—ñ–ª—å–∫—ñ—Å—Ç—å")
                fig_eq = px.pie(
                    eq_count,
                    names="–¢–∏–ø –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è",
                    values="–ö—ñ–ª—å–∫—ñ—Å—Ç—å",
                    title="–†–æ–∑–ø–æ–¥—ñ–ª –æ–ø–µ—Ä–∞—Ü—ñ–π –∑–∞ —Ç–∏–ø–æ–º –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è",
                    color_discrete_sequence=px.colors.qualitative.Set2,
                    hole=0.4
                )
                fig_eq.update_traces(textposition='inside', textinfo='percent+label')
                fig_eq.update_layout(legend=dict(orientation="h", y=-0.2))
                st.plotly_chart(fig_eq, use_container_width=True)
            else:
                st.warning("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ —Ç–∏–ø–∏ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è.")
                
    elif report_type == "–ê–Ω–∞–ª—ñ–∑ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤":
        st.subheader("–ê–Ω–∞–ª—ñ–∑ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤")
        
        if not filtered_df.empty and "–ü–Ü–ë" in filtered_df.columns:
            # –ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–æ–∫ –ø–µ—Ä–µ–¥ –∞–≥—Ä–µ–≥–∞—Ü–∏–µ–π
            agg_dict = {}
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º size() –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π
            operator_count = filtered_df.groupby("–ü–Ü–ë").size().reset_index(name="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ–π")
            
            # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if "–ß–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—é" in filtered_df.columns:
                agg_dict["–ß–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—é"] = "mean"
            if "–í—ñ–¥—Å–æ—Ç–æ–∫ –≤—Ç—Ä–∞—Ç" in filtered_df.columns:
                agg_dict["–í—ñ–¥—Å–æ—Ç–æ–∫ –≤—Ç—Ä–∞—Ç"] = "mean"
            
            if agg_dict:
                operator_metrics = filtered_df.groupby("–ü–Ü–ë", as_index=False).agg(agg_dict)
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                operator_stats = pd.merge(operator_count, operator_metrics, on="–ü–Ü–ë", how="left")
            else:
                operator_stats = operator_count
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
            st.subheader("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ–π –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º")
            operator_stats_count = operator_stats.sort_values("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ–π", ascending=False)
            
            fig_count = px.bar(
                operator_stats_count,
                x="–ü–Ü–ë",
                y="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ–π",
                title="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ–π –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º",
                color="–ü–Ü–ë",
                text=operator_stats_count["–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ–π"]
            )
            fig_count.update_traces(texttemplate='%{text}', textposition='outside')
            fig_count.update_layout(
                uniformtext_minsize=8,
                uniformtext_mode='hide',
                xaxis_title="–û–ø–µ—Ä–∞—Ç–æ—Ä",
                yaxis_title="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ–π",
                plot_bgcolor='rgba(240,240,240,0.8)',
                xaxis=dict(showgrid=False),
                yaxis=dict(showgrid=True, gridwidth=1, gridcolor='rgba(220,220,220,0.8)')
            )
            st.plotly_chart(fig_count, use_container_width=True)
            
            # –í—Ä–µ–º—è –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—é
            if "–ß–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—é" in operator_stats.columns:
                st.subheader("–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –æ–ø–µ—Ä–∞—Ü—ñ—ó –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º")
                operator_stats_time = operator_stats.sort_values("–ß–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—é")
                
                fig_time = px.bar(
                    operator_stats_time,
                    x="–ü–Ü–ë",
                    y="–ß–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—é",
                    title="–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –æ–ø–µ—Ä–∞—Ü—ñ—ó (—Ö–≤)",
                    color="–ü–Ü–ë",
                    text=round(operator_stats_time["–ß–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—é"], 1),
                    color_discrete_sequence=px.colors.sequential.Viridis
                )
                fig_time.update_traces(texttemplate='%{text}', textposition='outside')
                fig_time.update_layout(
                    uniformtext_minsize=8,
                    uniformtext_mode='hide',
                    xaxis_title="–û–ø–µ—Ä–∞—Ç–æ—Ä",
                    yaxis_title="–ß–∞—Å (—Ö–≤)",
                    plot_bgcolor='rgba(240,240,240,0.8)',
                    xaxis=dict(showgrid=False),
                    yaxis=dict(showgrid=True, gridwidth=1, gridcolor='rgba(220,220,220,0.8)')
                )
                st.plotly_chart(fig_time, use_container_width=True)
            
            # –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ—Ç–µ—Ä—å
            if "–í—ñ–¥—Å–æ—Ç–æ–∫ –≤—Ç—Ä–∞—Ç" in operator_stats.columns:
                st.subheader("–°–µ—Ä–µ–¥–Ω—ñ–π –≤—ñ–¥—Å–æ—Ç–æ–∫ –≤—Ç—Ä–∞—Ç –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º")
                operator_stats_loss = operator_stats.sort_values("–í—ñ–¥—Å–æ—Ç–æ–∫ –≤—Ç—Ä–∞—Ç")
                
                fig_loss = px.bar(
                    operator_stats_loss,
                    x="–ü–Ü–ë",
                    y="–í—ñ–¥—Å–æ—Ç–æ–∫ –≤—Ç—Ä–∞—Ç",
                    title="–°–µ—Ä–µ–¥–Ω—ñ–π –≤—ñ–¥—Å–æ—Ç–æ–∫ –≤—Ç—Ä–∞—Ç (%)",
                    color="–ü–Ü–ë",
                    text=round(operator_stats_loss["–í—ñ–¥—Å–æ—Ç–æ–∫ –≤—Ç—Ä–∞—Ç"], 2),
                    color_discrete_sequence=px.colors.sequential.Reds
                )
                fig_loss.update_traces(texttemplate='%{text}', textposition='outside')
                fig_loss.update_layout(
                    uniformtext_minsize=8,
                    uniformtext_mode='hide',
                    xaxis_title="–û–ø–µ—Ä–∞—Ç–æ—Ä",
                    yaxis_title="–í—Ç—Ä–∞—Ç–∏ (%)",
                    plot_bgcolor='rgba(240,240,240,0.8)',
                    xaxis=dict(showgrid=False),
                    yaxis=dict(showgrid=True, gridwidth=1, gridcolor='rgba(220,220,220,0.8)')
                )
                st.plotly_chart(fig_loss, use_container_width=True)
            
            # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å–≤–æ–¥–∫–∏
            st.subheader("–ó–≤–µ–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü—è –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤")
            if "–ß–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—é" in operator_stats.columns and "–í—ñ–¥—Å–æ—Ç–æ–∫ –≤—Ç—Ä–∞—Ç" in operator_stats.columns:
                st.dataframe(operator_stats.style
                       .highlight_max(subset=["–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ–π"], color='lightgreen')
                       .highlight_min(subset=["–ß–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—é"], color='lightgreen')
                       .highlight_min(subset=["–í—ñ–¥—Å–æ—Ç–æ–∫ –≤—Ç—Ä–∞—Ç"], color='lightgreen'))
            else:
                st.dataframe(operator_stats)
            
            # –í—ã–¥–µ–ª–µ–Ω–∏–µ –ª—É—á—à–∏—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
            st.subheader("–ê–Ω–∞–ª—ñ–∑ –Ω–∞–π–µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—à–∏—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤")
            
            cols = st.columns(3)
            best_count = operator_stats.loc[operator_stats["–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ–π"].idxmax()]
            cols[0].metric("–ù–∞–π–±—ñ–ª—å—à–µ –æ–ø–µ—Ä–∞—Ü—ñ–π", f"{best_count['–ü–Ü–ë']}: {best_count['–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ–π']}")
            
            if "–ß–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—é" in operator_stats.columns:
                best_time = operator_stats.loc[operator_stats["–ß–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—é"].idxmin()]
                cols[1].metric("–ù–∞–π—à–≤–∏–¥—à–∏–π —á–∞—Å –æ–ø–µ—Ä–∞—Ü—ñ—ó", f"{best_time['–ü–Ü–ë']}: {best_time['–ß–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—é']:.1f} —Ö–≤")
            
            if "–í—ñ–¥—Å–æ—Ç–æ–∫ –≤—Ç—Ä–∞—Ç" in operator_stats.columns:
                best_quality = operator_stats.loc[operator_stats["–í—ñ–¥—Å–æ—Ç–æ–∫ –≤—Ç—Ä–∞—Ç"].idxmin()]
                cols[2].metric("–ù–∞–π–º–µ–Ω—à–∏–π % –≤—Ç—Ä–∞—Ç", f"{best_quality['–ü–Ü–ë']}: {best_quality['–í—ñ–¥—Å–æ—Ç–æ–∫ –≤—Ç—Ä–∞—Ç']:.2f}%")
        else:
            st.warning("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤.")
            
    elif report_type == "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è":
        st.subheader("–ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è")
        
        if "–¢–∏–ø –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è" in filtered_df.columns and not filtered_df.empty:
            # –†–∞—Å—á–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã—Ö —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π
            working_days = count_working_days(start_date, end_date)
            expected_minutes = working_days * 480  # 8 —á–∞—Å–æ–≤ * 60 –º–∏–Ω—É—Ç
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é
            equipment_stats = []
            
            for equip, group in filtered_df.groupby("–¢–∏–ø –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è"):
                distinct_days = group["–î–∞—Ç–∞"].dt.date.nunique()
                total_minutes = group["–ß–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—é"].sum() if "–ß–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—é" in group.columns else 0
                operations_count = len(group)
                
                day_util_pct = (distinct_days / working_days) * 100 if working_days > 0 else 0
                minutes_util_pct = (total_minutes / expected_minutes) * 100 if expected_minutes > 0 else 0
                
                equipment_stats.append({
                    "–¢–∏–ø –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è": equip,
                    "–†–µ–∞–ª—å–Ω—ñ –¥–Ω—ñ —Ä–æ–±–æ—Ç–∏": distinct_days,
                    "–ü–ª–∞–Ω–æ–≤—ñ –¥–Ω—ñ —Ä–æ–±–æ—Ç–∏": working_days,
                    "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ—Å—Ç—å (–¥–Ω—ñ), %": f"{day_util_pct:.1f}%",
                    "–§–∞–∫—Ç–∏—á–Ω—ñ –≥–æ–¥–∏–Ω–∏": total_minutes / 60,
                    "–ü–ª–∞–Ω–æ–≤—ñ –≥–æ–¥–∏–Ω–∏": expected_minutes / 60,
                    "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ—Å—Ç—å (–≥–æ–¥–∏–Ω–∏), %": f"{minutes_util_pct:.1f}%",
                    "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ–π": operations_count,
                    "–û–ø–µ—Ä–∞—Ü—ñ–π –Ω–∞ –¥–µ–Ω—å": operations_count / distinct_days if distinct_days > 0 else 0
                })
            
            equipment_df = pd.DataFrame(equipment_stats)
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
            st.dataframe(equipment_df)
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –ø–æ –¥–Ω—è–º
            equipment_df_sorted = equipment_df.copy()
            try:
                equipment_df_sorted["–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ—Å—Ç—å (–¥–Ω—ñ), %"] = equipment_df_sorted["–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ—Å—Ç—å (–¥–Ω—ñ), %"].str.rstrip("%").astype(float)
            except Exception:
                # –ï—Å–ª–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                st.warning("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –≤—ñ–¥—Å–æ—Ç–∫—ñ–≤ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ—Å—Ç—ñ –≤ —á–∏—Å–ª–∞")
                # –°–æ–∑–¥–∞–µ–º —á–∏—Å–ª–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É –Ω–∞–ø—Ä—è–º—É—é –∏–∑ day_util_pct
                equipment_df_sorted["–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ—Å—Ç—å (–¥–Ω—ñ), %_num"] = [float(str(e).rstrip("%")) if isinstance(e, str) else e for e in equipment_df_sorted["–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ—Å—Ç—å (–¥–Ω—ñ), %"]]
                equipment_df_sorted = equipment_df_sorted.sort_values("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ—Å—Ç—å (–¥–Ω—ñ), %_num", ascending=False)
            else:
                equipment_df_sorted = equipment_df_sorted.sort_values("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ—Å—Ç—å (–¥–Ω—ñ), %", ascending=False)
            
            fig_days = px.bar(
                equipment_df_sorted,
                x="–¢–∏–ø –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è",
                y="–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ—Å—Ç—å (–¥–Ω—ñ), %",
                title=f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ—Å—Ç—å –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è (–¥–Ω—ñ), % –∑–∞ –ø–µ—Ä—ñ–æ–¥ {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}",
                color="–¢–∏–ø –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è",
                text="–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ—Å—Ç—å (–¥–Ω—ñ), %"
            )
            fig_days.update_traces(texttemplate='%{text}', textposition='outside')
            fig_days.add_hline(y=100, line_dash="dash", line_color="red", annotation_text="–ú–∞–∫—Å. –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ—Å—Ç—å")
            fig_days.update_layout(
                xaxis_title="–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è",
                yaxis_title="–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ—Å—Ç—å (%)",
                plot_bgcolor='rgba(240,240,240,0.8)',
                xaxis=dict(showgrid=False),
                yaxis=dict(showgrid=True, gridwidth=1, gridcolor='rgba(220,220,220,0.8)', range=[0, 110])
            )
            st.plotly_chart(fig_days, use_container_width=True)
            
            # –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –ø–æ –¥–Ω—è–º
            if not filtered_df.empty:
                eq_daily = filtered_df.groupby([filtered_df["–î–∞—Ç–∞"].dt.date, "–¢–∏–ø –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è"]).size().reset_index(name="–û–ø–µ—Ä–∞—Ü—ñ–π")
                eq_daily_pivot = eq_daily.pivot(index="–î–∞—Ç–∞", columns="–¢–∏–ø –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è", values="–û–ø–µ—Ä–∞—Ü—ñ–π").fillna(0)

                # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è heatmap
                dates = eq_daily_pivot.index.tolist()
                equipment_types = eq_daily_pivot.columns.tolist()
                heatmap_data = eq_daily_pivot.values

                fig_heatmap = go.Figure(data=go.Heatmap(
                    z=heatmap_data,
                    x=equipment_types,
                    y=[d.strftime("%d.%m.%Y") for d in dates],
                    colorscale="YlGnBu",
                    hoverongaps=False,
                    text=heatmap_data.round(1),
                    texttemplate="%{text}",
                    colorbar=dict(title="–û–ø–µ—Ä–∞—Ü—ñ–π")
                ))
                
                fig_heatmap.update_layout(
                    title="–©–æ–¥–µ–Ω–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è (–∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ–π)",
                    xaxis_title="–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è",
                    yaxis_title="–î–∞—Ç–∞",
                    plot_bgcolor='rgba(240,240,240,0.8)',
                )
                
                st.plotly_chart(fig_heatmap, use_container_width=True)
        else:
            st.warning("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è.")
            
    elif report_type == "–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞":
        st.subheader("–ê–Ω–∞–ª—ñ–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞")
        
        if not filtered_df.empty:
            # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
            days_in_period = (end_date - start_date).days + 1
            working_days = count_working_days(start_date, end_date)
            
            # –†–∞—Å—á–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            productivity_per_day = total_batches / days_in_period if days_in_period > 0 else 0
            productivity_per_working_day = total_batches / working_days if working_days > 0 else 0
            
            col1, col2, col3 = st.columns(3)
            col1.metric("–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ–π", f"{total_batches} –æ–ø–µ—Ä–∞—Ü—ñ–π")
            col2.metric("–°–µ—Ä–µ–¥–Ω—è –¥–µ–Ω–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å", f"{productivity_per_day:.1f} –æ–ø–µ—Ä–∞—Ü—ñ–π/–¥–µ–Ω—å")
            col3.metric("–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —É —Ä–æ–±–æ—á—ñ –¥–Ω—ñ", f"{productivity_per_working_day:.1f} –æ–ø–µ—Ä–∞—Ü—ñ–π/–¥–µ–Ω—å")
            
            # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ –¥–Ω—è–º
            daily_data = filtered_df.groupby(filtered_df["–î–∞—Ç–∞"].dt.date).size().reset_index(name="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ–π")
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –¥–Ω—è–º
            fig_daily = px.bar(
                daily_data,
                x="–î–∞—Ç–∞",
                y="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ–π",
                title="–î–µ–Ω–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å (–∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ–π)",
                labels={"–î–∞—Ç–∞": "–î–∞—Ç–∞", "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ–π": "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ–π"},
                color_discrete_sequence=["#5DADE2"]
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é –ª–∏–Ω–∏—é
            fig_daily.add_hline(
                y=daily_data["–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ–π"].mean(),
                line_dash="dash",
                line_color="red",
                annotation_text=f"–°–µ—Ä–µ–¥–Ω—è: {daily_data['–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ–π'].mean():.1f}",
                annotation_position="top right"
            )
            
            fig_daily.update_layout(
                xaxis_title="–î–∞—Ç–∞",
                yaxis_title="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ–π",
                plot_bgcolor='rgba(240,240,240,0.8)',
                xaxis=dict(showgrid=True, gridwidth=1, gridcolor='rgba(220,220,220,0.8)'),
                yaxis=dict(showgrid=True, gridwidth=1, gridcolor='rgba(220,220,220,0.8)')
            )
            st.plotly_chart(fig_daily, use_container_width=True)
            
            # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º
            product_ops = filtered_df.groupby("–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç—É").size().reset_index(name="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ–π")
            product_ops_sorted = product_ops.sort_values("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ–π", ascending=False)
            
            fig_prod = px.bar(
                product_ops_sorted,
                x="–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç—É",
                y="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ–π",
                title="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ–π –∑–∞ —Ç–∏–ø–∞–º–∏ –ø—Ä–æ–¥—É–∫—Ü—ñ—ó",
                color="–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç—É",
                text=product_ops_sorted["–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ–π"]
            )
            fig_prod.update_traces(texttemplate='%{text}', textposition='outside')
            # –£–ª—É—á—à–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            max_label_length = 15  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –º–µ—Ç–∫–∏
            product_labels = {}
            for i, product in enumerate(product_ops_sorted["–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç—É"].unique()):
                if len(product) > max_label_length:
                    short_name = product[:max_label_length] + "..."
                    product_labels[product] = short_name
            
            fig_prod.update_layout(
                xaxis_title="–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç—É",
                yaxis_title="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ–π",
                plot_bgcolor='rgba(240,240,240,0.8)',
                xaxis=dict(
                    showgrid=False,
                    tickmode='array',
                    tickvals=list(range(len(product_ops_sorted["–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç—É"].unique()))),
                    ticktext=[product_labels.get(p, p) for p in product_ops_sorted["–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç—É"].unique()],
                ),
                yaxis=dict(showgrid=True, gridwidth=1, gridcolor='rgba(220,220,220,0.8)'),
                height=500,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                margin=dict(b=100)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∏–∂–Ω–∏–π –æ—Ç—Å—Ç—É–ø –¥–ª—è –º–µ—Ç–æ–∫
            )
            st.plotly_chart(fig_prod, use_container_width=True)
            
            # –í—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–π - –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
            if "–ß–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—é" in filtered_df.columns:
                st.subheader("–ê–Ω–∞–ª—ñ–∑ —á–∞—Å—É –æ–ø–µ—Ä–∞—Ü—ñ–π")
                
                product_time = filtered_df.groupby("–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç—É", as_index=False)["–ß–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—é"].mean()
                product_time_sorted = product_time.sort_values("–ß–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—é")
                
                fig_time = px.bar(
                    product_time_sorted,
                    x="–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç—É",
                    y="–ß–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—é",
                    title="–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑–∞ —Ç–∏–ø–∞–º–∏ –ø—Ä–æ–¥—É–∫—Ü—ñ—ó",
                    color="–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç—É",
                    text=round(product_time_sorted["–ß–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—é"], 1)
                )
                fig_time.update_traces(texttemplate='%{text}', textposition='outside')
                # –£–ª—É—á—à–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤
                max_label_length = 15  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –º–µ—Ç–∫–∏
                product_labels = {}
                for i, product in enumerate(product_time_sorted["–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç—É"].unique()):
                    if len(product) > max_label_length:
                        short_name = product[:max_label_length] + "..."
                        product_labels[product] = short_name
                
                fig_time.update_layout(
                    xaxis_title="–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç—É",
                    yaxis_title="–ß–∞—Å (—Ö–≤)",
                    plot_bgcolor='rgba(240,240,240,0.8)',
                    xaxis=dict(
                        showgrid=False,
                        tickmode='array',
                        tickvals=list(range(len(product_time_sorted["–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç—É"].unique()))),
                        ticktext=[product_labels.get(p, p) for p in product_time_sorted["–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç—É"].unique()],
                    ),
                    yaxis=dict(showgrid=True, gridwidth=1, gridcolor='rgba(220,220,220,0.8)'),
                    height=500,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                    margin=dict(b=100)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∏–∂–Ω–∏–π –æ—Ç—Å—Ç—É–ø –¥–ª—è –º–µ—Ç–æ–∫
                )
                st.plotly_chart(fig_time, use_container_width=True)
                
                # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
                fig_hist = px.histogram(
                    filtered_df,
                    x="–ß–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—é",
                    nbins=20,
                    title="–†–æ–∑–ø–æ–¥—ñ–ª —á–∞—Å—É –æ–ø–µ—Ä–∞—Ü—ñ–π",
                    color_discrete_sequence=["#3498DB"]
                )
                fig_hist.update_layout(
                    xaxis_title="–ß–∞—Å –æ–ø–µ—Ä–∞—Ü—ñ—ó (—Ö–≤)",
                    yaxis_title="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ–π",
                    plot_bgcolor='rgba(240,240,240,0.8)',
                    xaxis=dict(showgrid=True, gridwidth=1, gridcolor='rgba(220,220,220,0.8)'),
                    yaxis=dict(showgrid=True, gridwidth=1, gridcolor='rgba(220,220,220,0.8)')
                )
                st.plotly_chart(fig_hist, use_container_width=True)
                
                # –ù–æ–≤—ã–π –æ—Ç—á–µ—Ç: –°–∞–º—ã–µ –±—ã—Å—Ç—Ä—ã–µ –∏ –º–µ–¥–ª–µ–Ω–Ω—ã–µ –≤–∞—Ä–∫–∏ –ø–æ —Ç–∏–ø–∞–º –ø—Ä–æ–¥—É–∫—Ç–∞
                st.subheader("–ù–∞–π—à–≤–∏–¥—à—ñ —Ç–∞ –Ω–∞–π–ø–æ–≤—ñ–ª—å–Ω—ñ—à—ñ –≤–∞—Ä–∫–∏ –∑–∞ —Ç–∏–ø–∞–º–∏ –ø—Ä–æ–¥—É–∫—Ç—É")
                
                # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
                product_time_minmax = pd.DataFrame()
                
                # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
                for product_type in filtered_df["–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç—É"].unique():
                    product_data = filtered_df[filtered_df["–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç—É"] == product_type]
                    if len(product_data) > 0:
                        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∞–º–æ–π –±—ã—Å—Ç—Ä–æ–π –∏ —Å–∞–º–æ–π –º–µ–¥–ª–µ–Ω–Ω–æ–π –≤–∞—Ä–∫–∏
                        fastest = product_data.loc[product_data["–ß–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—é"].idxmin()]
                        slowest = product_data.loc[product_data["–ß–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—é"].idxmax()]
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ DataFrame
                        product_time_minmax = pd.concat([product_time_minmax, pd.DataFrame({
                            "–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç—É": [product_type, product_type],
                            "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è": ["–ù–∞–π—à–≤–∏–¥—à–∞", "–ù–∞–π–ø–æ–≤—ñ–ª—å–Ω—ñ—à–∞"],
                            "–ß–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—é": [fastest["–ß–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—é"], slowest["–ß–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—é"]],
                            "–î–∞—Ç–∞": [fastest["–î–∞—Ç–∞"], slowest["–î–∞—Ç–∞"]],
                            "–ü–Ü–ë": [fastest["–ü–Ü–ë"], slowest["–ü–Ü–ë"]] if "–ü–Ü–ë" in fastest else ["", ""],
                            "–¢–∏–ø –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è": [fastest["–¢–∏–ø –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è"], slowest["–¢–∏–ø –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è"]] if "–¢–∏–ø –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è" in fastest else ["", ""]
                        })])
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ, —Å—Ç—Ä–æ–∏–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
                if len(product_time_minmax) > 0:
                    # –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª–±–∏–∫–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É —Å–æ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å—Ç–æ–ª–±—Ü–∞–º–∏
                    fig_minmax = px.bar(
                        product_time_minmax,
                        x="–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç—É",
                        y="–ß–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—é",
                        color="–ö–∞—Ç–µ–≥–æ—Ä—ñ—è",
                        barmode="group",
                        title="–ß–∞—Å –Ω–∞–π—à–≤–∏–¥—à–∏—Ö —Ç–∞ –Ω–∞–π–ø–æ–≤—ñ–ª—å–Ω—ñ—à–∏—Ö –≤–∞—Ä–æ–∫ –∑–∞ —Ç–∏–ø–∞–º–∏ –ø—Ä–æ–¥—É–∫—Ç—É",
                        hover_data=["–î–∞—Ç–∞", "–ü–Ü–ë", "–¢–∏–ø –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è"],
                        color_discrete_map={"–ù–∞–π—à–≤–∏–¥—à–∞": "#2ECC71", "–ù–∞–π–ø–æ–≤—ñ–ª—å–Ω—ñ—à–∞": "#E74C3C"}
                    )
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫–∏ —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                    fig_minmax.update_traces(texttemplate='%{y:.1f}', textposition='outside')
                    
                    # –£–ª—É—á—à–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤
                    # –í–º–µ—Å—Ç–æ –Ω–∞–∫–ª–æ–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
                    max_label_length = 15  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –º–µ—Ç–∫–∏ –Ω–∞ –æ—Å–∏ X
                    product_labels = {}
                    for i, product in enumerate(product_time_minmax["–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç—É"].unique()):
                        if len(product) > max_label_length:
                            short_name = product[:max_label_length] + "..."
                            product_labels[product] = short_name
                    
                    fig_minmax.update_layout(
                        xaxis_title="–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç—É",
                        yaxis_title="–ß–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—é (—Ö–≤)",
                        plot_bgcolor='rgba(240,240,240,0.8)',
                        xaxis=dict(
                            showgrid=False,
                            tickmode='array',
                            tickvals=list(range(len(product_time_minmax["–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç—É"].unique()))),
                            ticktext=[product_labels.get(p, p) for p in product_time_minmax["–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç—É"].unique()],
                        ),
                        yaxis=dict(showgrid=True, gridwidth=1, gridcolor='rgba(220,220,220,0.8)'),
                        legend=dict(title="", orientation="h", yanchor="bottom", y=1.02, xanchor="center", x=0.5),
                        height=500,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                        margin=dict(b=100)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∏–∂–Ω–∏–π –æ—Ç—Å—Ç—É–ø –¥–ª—è –º–µ—Ç–æ–∫
                    )
                    st.plotly_chart(fig_minmax, use_container_width=True)
                    
                    # –¢–∞–±–ª–∏—Ü–∞ —Å –¥–µ—Ç–∞–ª—è–º–∏
                    st.subheader("–î–µ—Ç–∞–ª—ñ –Ω–∞–π—à–≤–∏–¥—à–∏—Ö —Ç–∞ –Ω–∞–π–ø–æ–≤—ñ–ª—å–Ω—ñ—à–∏—Ö –≤–∞—Ä–æ–∫")
                    st.dataframe(product_time_minmax)
        else:
            st.warning("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞.")
            
    elif report_type == "–ê–Ω–∞–ª—ñ–∑ —è–∫–æ—Å—Ç—ñ —Ç–∞ –≤—Ç—Ä–∞—Ç":
        st.subheader("–ê–Ω–∞–ª—ñ–∑ —è–∫–æ—Å—Ç—ñ —Ç–∞ –≤—Ç—Ä–∞—Ç")
        
        if "–í—ñ–¥—Å–æ—Ç–æ–∫ –≤—Ç—Ä–∞—Ç" in filtered_df.columns and not filtered_df.empty:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ—Ç–µ—Ä—è–º
            avg_loss = filtered_df["–í—ñ–¥—Å–æ—Ç–æ–∫ –≤—Ç—Ä–∞—Ç"].mean()
            max_loss = filtered_df["–í—ñ–¥—Å–æ—Ç–æ–∫ –≤—Ç—Ä–∞—Ç"].max()
            min_loss = filtered_df["–í—ñ–¥—Å–æ—Ç–æ–∫ –≤—Ç—Ä–∞—Ç"].min()
            
            col1, col2, col3 = st.columns(3)
            col1.metric("–°–µ—Ä–µ–¥–Ω—ñ–π –≤—ñ–¥—Å–æ—Ç–æ–∫ –≤—Ç—Ä–∞—Ç", f"{avg_loss:.2f}%")
            col2.metric("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –≤—ñ–¥—Å–æ—Ç–æ–∫ –≤—Ç—Ä–∞—Ç", f"{max_loss:.2f}%")
            col3.metric("–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –≤—ñ–¥—Å–æ—Ç–æ–∫ –≤—Ç—Ä–∞—Ç", f"{min_loss:.2f}%")
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ—Ä—å –ø–æ –¥–Ω—è–º
            daily_loss = filtered_df.groupby(filtered_df["–î–∞—Ç–∞"].dt.date)["–í—ñ–¥—Å–æ—Ç–æ–∫ –≤—Ç—Ä–∞—Ç"].mean().reset_index()
            
            fig_daily = px.line(
                daily_loss,
                x="–î–∞—Ç–∞",
                y="–í—ñ–¥—Å–æ—Ç–æ–∫ –≤—Ç—Ä–∞—Ç",
                title="–î–∏–Ω–∞–º—ñ–∫–∞ –≤—ñ–¥—Å–æ—Ç–∫–∞ –≤—Ç—Ä–∞—Ç –ø–æ –¥–Ω—è—Ö",
                markers=True
            )
            fig_daily.update_traces(line=dict(width=3, color="#E74C3C"), marker=dict(size=8))
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é –ª–∏–Ω–∏—é
            fig_daily.add_hline(
                y=avg_loss,
                line_dash="dash",
                line_color="blue",
                annotation_text=f"–°–µ—Ä–µ–¥–Ω—è: {avg_loss:.2f}%",
                annotation_position="top right"
            )
            
            fig_daily.update_layout(
                xaxis_title="–î–∞—Ç–∞",
                yaxis_title="–í—ñ–¥—Å–æ—Ç–æ–∫ –≤—Ç—Ä–∞—Ç (%)",
                plot_bgcolor='rgba(240,240,240,0.8)',
                xaxis=dict(showgrid=True, gridwidth=1, gridcolor='rgba(220,220,220,0.8)'),
                yaxis=dict(showgrid=True, gridwidth=1, gridcolor='rgba(220,220,220,0.8)')
            )
            st.plotly_chart(fig_daily, use_container_width=True)
            
            # –ê–Ω–∞–ª–∏–∑ –≤—Ç—Ä–∞—Ç –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º
            product_loss = filtered_df.groupby("–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç—É", as_index=False)["–í—ñ–¥—Å–æ—Ç–æ–∫ –≤—Ç—Ä–∞—Ç"].mean()
            product_loss_sorted = product_loss.sort_values("–í—ñ–¥—Å–æ—Ç–æ–∫ –≤—Ç—Ä–∞—Ç", ascending=False)
            
            fig_prod = px.bar(
                product_loss_sorted,
                x="–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç—É",
                y="–í—ñ–¥—Å–æ—Ç–æ–∫ –≤—Ç—Ä–∞—Ç",
                title="–°–µ—Ä–µ–¥–Ω—ñ–π –≤—ñ–¥—Å–æ—Ç–æ–∫ –≤—Ç—Ä–∞—Ç –∑–∞ —Ç–∏–ø–∞–º–∏ –ø—Ä–æ–¥—É–∫—Ü—ñ—ó",
                color="–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç—É",
                text=round(product_loss_sorted["–í—ñ–¥—Å–æ—Ç–æ–∫ –≤—Ç—Ä–∞—Ç"], 2)
            )
            fig_prod.update_traces(texttemplate='%{text}', textposition='outside')
            fig_prod.add_hline(
                y=avg_loss,
                line_dash="dash",
                line_color="red",
                annotation_text=f"–ó–∞–≥–∞–ª—å–Ω–∏–π —Å–µ—Ä–µ–¥–Ω—ñ–π: {avg_loss:.2f}%",
                annotation_position="top right"
            )
            
            # –£–ª—É—á—à–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            max_label_length = 15  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –º–µ—Ç–∫–∏
            product_labels = {}
            for i, product in enumerate(product_loss_sorted["–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç—É"].unique()):
                if len(product) > max_label_length:
                    short_name = product[:max_label_length] + "..."
                    product_labels[product] = short_name
            
            fig_prod.update_layout(
                xaxis_title="–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç—É",
                yaxis_title="–í—ñ–¥—Å–æ—Ç–æ–∫ –≤—Ç—Ä–∞—Ç (%)",
                plot_bgcolor='rgba(240,240,240,0.8)',
                xaxis=dict(
                    showgrid=False,
                    tickmode='array',
                    tickvals=list(range(len(product_loss_sorted["–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç—É"].unique()))),
                    ticktext=[product_labels.get(p, p) for p in product_loss_sorted["–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç—É"].unique()],
                ),
                yaxis=dict(showgrid=True, gridwidth=1, gridcolor='rgba(220,220,220,0.8)'),
                height=500,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                margin=dict(b=100)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∏–∂–Ω–∏–π –æ—Ç—Å—Ç—É–ø –¥–ª—è –º–µ—Ç–æ–∫
            )
            st.plotly_chart(fig_prod, use_container_width=True)
            
            # –ê–Ω–∞–ª–∏–∑ –≤—Ç—Ä–∞—Ç –ø–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é
            equip_loss = filtered_df.groupby("–¢–∏–ø –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è", as_index=False)["–í—ñ–¥—Å–æ—Ç–æ–∫ –≤—Ç—Ä–∞—Ç"].mean()
            equip_loss_sorted = equip_loss.sort_values("–í—ñ–¥—Å–æ—Ç–æ–∫ –≤—Ç—Ä–∞—Ç", ascending=False)
            
            fig_equip = px.bar(
                equip_loss_sorted,
                x="–¢–∏–ø –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è",
                y="–í—ñ–¥—Å–æ—Ç–æ–∫ –≤—Ç—Ä–∞—Ç",
                title="–°–µ—Ä–µ–¥–Ω—ñ–π –≤—ñ–¥—Å–æ—Ç–æ–∫ –≤—Ç—Ä–∞—Ç –∑–∞ —Ç–∏–ø–∞–º–∏ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è",
                color="–¢–∏–ø –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è",
                text=round(equip_loss_sorted["–í—ñ–¥—Å–æ—Ç–æ–∫ –≤—Ç—Ä–∞—Ç"], 2)
            )
            fig_equip.update_traces(texttemplate='%{text}', textposition='outside')
            fig_equip.add_hline(
                y=avg_loss,
                line_dash="dash",
                line_color="red",
                annotation_text=f"–ó–∞–≥–∞–ª—å–Ω–∏–π —Å–µ—Ä–µ–¥–Ω—ñ–π: {avg_loss:.2f}%",
                annotation_position="top right"
            )
            
            # –£–ª—É—á—à–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
            max_label_length = 15  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –º–µ—Ç–∫–∏
            equipment_labels = {}
            for i, equipment in enumerate(equip_loss_sorted["–¢–∏–ø –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è"].unique()):
                if len(equipment) > max_label_length:
                    short_name = equipment[:max_label_length] + "..."
                    equipment_labels[equipment] = short_name
            
            fig_equip.update_layout(
                xaxis_title="–¢–∏–ø –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è",
                yaxis_title="–í—ñ–¥—Å–æ—Ç–æ–∫ –≤—Ç—Ä–∞—Ç (%)",
                plot_bgcolor='rgba(240,240,240,0.8)',
                xaxis=dict(
                    showgrid=False,
                    tickmode='array',
                    tickvals=list(range(len(equip_loss_sorted["–¢–∏–ø –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è"].unique()))),
                    ticktext=[equipment_labels.get(p, p) for p in equip_loss_sorted["–¢–∏–ø –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è"].unique()],
                ),
                yaxis=dict(showgrid=True, gridwidth=1, gridcolor='rgba(220,220,220,0.8)'),
                height=500,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                margin=dict(b=100)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∏–∂–Ω–∏–π –æ—Ç—Å—Ç—É–ø –¥–ª—è –º–µ—Ç–æ–∫
            )
            st.plotly_chart(fig_equip, use_container_width=True)
            
            # –ë–æ–∫—Å–ø–ª–æ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Ç—Ä–∞—Ç –ø–æ —Ç–∏–ø–∞–º –ø—Ä–æ–¥—É–∫—Ü–∏–∏
            fig_box = px.box(
                filtered_df,
                x="–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç—É",
                y="–í—ñ–¥—Å–æ—Ç–æ–∫ –≤—Ç—Ä–∞—Ç",
                color="–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç—É",
                title="–†–æ–∑–ø–æ–¥—ñ–ª –≤—ñ–¥—Å–æ—Ç–∫–∞ –≤—Ç—Ä–∞—Ç –∑–∞ —Ç–∏–ø–∞–º–∏ –ø—Ä–æ–¥—É–∫—Ü—ñ—ó",
                points="all"
            )
            
            # –£–ª—É—á—à–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            max_label_length = 15  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –º–µ—Ç–∫–∏
            product_labels = {}
            for i, product in enumerate(filtered_df["–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç—É"].unique()):
                if len(product) > max_label_length:
                    short_name = product[:max_label_length] + "..."
                    product_labels[product] = short_name
            
            fig_box.update_layout(
                xaxis_title="–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç—É",
                yaxis_title="–í—ñ–¥—Å–æ—Ç–æ–∫ –≤—Ç—Ä–∞—Ç (%)",
                plot_bgcolor='rgba(240,240,240,0.8)',
                xaxis=dict(
                    showgrid=False,
                    tickmode='array',
                    tickvals=list(range(len(filtered_df["–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç—É"].unique()))),
                    ticktext=[product_labels.get(p, p) for p in filtered_df["–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç—É"].unique()],
                ),
                yaxis=dict(showgrid=True, gridwidth=1, gridcolor='rgba(220,220,220,0.8)'),
                height=500,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                margin=dict(b=100)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∏–∂–Ω–∏–π –æ—Ç—Å—Ç—É–ø –¥–ª—è –º–µ—Ç–æ–∫
            )
            st.plotly_chart(fig_box, use_container_width=True)
            
            # –î–∏–≤—ñ–∞–Ω—Ç–Ω—ñ—Å—Ç—å –≤–∞—Ä–æ–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω)
            if "–£—Å—ñ" not in selected_products and len(selected_products) == 1:
                product_deviant = selected_products[0]
                st.subheader(f"–î–∏–≤—ñ–∞–Ω—Ç–Ω—ñ—Å—Ç—å –≤–∞—Ä–æ–∫ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç—É: {product_deviant}")
                
                product_df = filtered_df[filtered_df["–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç—É"] == product_deviant]
                if not product_df.empty and "–ß–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—é" in product_df.columns:
                    fastest = product_df.loc[product_df["–ß–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—é"].idxmin()]
                    slowest = product_df.loc[product_df["–ß–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—é"].idxmax()]
                    # –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–π –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
                    mean_time = product_df["–ß–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—é"].mean()
                    std_time = product_df["–ß–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—é"].std()
                    upper_limit = mean_time + 2 * std_time
                    lower_limit = max(mean_time - 2 * std_time, 0)  # –ù–µ –º–µ–Ω—å—à–µ –Ω—É–ª—è
                
                    fig_scatter = px.scatter(
                        product_df,
                        x="–î–∞—Ç–∞",
                        y="–ß–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—é",
                        hover_data=["–ü–Ü–ë", "–¢–∏–ø –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è"],
                        title=f"–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –≤–∞—Ä–æ–∫ –∑–∞ —á–∞—Å–æ–º –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç—É: {product_deviant}",
                        labels={"–ß–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—é": "–ß–∞—Å –æ–ø–µ—Ä–∞—Ü—ñ—ó (—Ö–≤)"},
                        color_discrete_sequence=["#3498DB"]
                    )
                
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–æ—Å—ã –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π
                    fig_scatter.add_hline(
                        y=mean_time, 
                        line_dash="solid", 
                        line_color="#2C3E50",
                        line_width=2,
                        annotation_text=f"–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å: {mean_time:.1f} —Ö–≤",
                        annotation_position="top right"
                    )
                    fig_scatter.add_hline(
                        y=upper_limit, 
                        line_dash="dot", 
                        line_color="#E74C3C",
                        annotation_text="+2œÉ",
                        annotation_position="top right"
                    )
                    fig_scatter.add_hline(
                        y=lower_limit, 
                        line_dash="dot", 
                        line_color="#2ECC71",
                        annotation_text="-2œÉ",
                        annotation_position="top right"
                    )
                    
                    fig_scatter.add_scatter(
                        x=[fastest["–î–∞—Ç–∞"]],
                        y=[fastest["–ß–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—é"]],
                        mode="markers",
                        marker=dict(size=15, color="#2ECC71", symbol="star-triangle-up"),
                        name="–ù–∞–π—à–≤–∏–¥—à–∞ –≤–∞—Ä–∫–∞"
                    )
                    
                    fig_scatter.add_scatter(
                        x=[slowest["–î–∞—Ç–∞"]],
                        y=[slowest["–ß–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—é"]],
                        mode="markers",
                        marker=dict(size=15, color="#E74C3C", symbol="star-triangle-down"),
                        name="–ù–∞–π–ø–æ–≤—ñ–ª—å–Ω—ñ—à–∞ –≤–∞—Ä–∫–∞"
                    )
                    
                    fig_scatter.update_layout(
                        plot_bgcolor='rgba(240,240,240,0.8)',
                        xaxis=dict(showgrid=True, gridwidth=1, gridcolor='rgba(220,220,220,0.8)'),
                        yaxis=dict(showgrid=True, gridwidth=1, gridcolor='rgba(220,220,220,0.8)'),
                        legend=dict(orientation="h", yanchor="bottom", y=-0.3, xanchor="center", x=0.5)
                    )
                    st.plotly_chart(fig_scatter, use_container_width=True)
        else:
            st.warning("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —è–∫–æ—Å—Ç—ñ —Ç–∞ –≤—Ç—Ä–∞—Ç.")
