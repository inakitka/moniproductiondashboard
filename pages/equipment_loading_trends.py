import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, date, timedelta
import calendar
from google.oauth2 import service_account
from googleapiclient.discovery import build

# ---------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets
# ---------------------------
SHEET_ID = "1cbQtfwOR32_J7sIGuZnqmEINKrc1hqcAwAZVmOADPMA"
SCOPES = ["https://www.googleapis.com/auth/spreadsheets.readonly"]

credentials = service_account.Credentials.from_service_account_info(
    st.secrets["gcp_service_account"], scopes=SCOPES
)
service = build("sheets", "v4", credentials=credentials)

# ---------------------------
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets
# ---------------------------
@st.cache_data
def load_data(sheet_name):
    try:
        sheet = service.spreadsheets()
        result = sheet.values().get(spreadsheetId=SHEET_ID, range=sheet_name).execute()
        values = result.get("values", [])
        if not values:
            st.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ –ª–∏—Å—Ç–∞ {sheet_name}!")
            return pd.DataFrame()
        
        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame(values[1:], columns=values[0])
        df.columns = df.columns.str.strip()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫, —á—Ç–æ–±—ã —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∏–º–µ–Ω–∞
        column_mapping = {
            "–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è": "–¢–∏–ø –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è",
            "–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞": "–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç—É",
            "–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞": "–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
            "–í—Ä–µ–º—è –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—é": "–ß–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—é",
            "–ü—Ä–æ—Ü–µ–Ω—Ç –±—Ä–∞–∫–∞": "–í—ñ–¥—Å–æ—Ç–æ–∫ –±—Ä–∞–∫—É"
        }
        
        for old_col, new_col in column_mapping.items():
            if old_col in df.columns and new_col not in df.columns:
                df.rename(columns={old_col: new_col}, inplace=True)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã
        if "–î–∞—Ç–∞" in df.columns:
            df["–î–∞—Ç–∞"] = pd.to_datetime(df["–î–∞—Ç–∞"], format="%d.%m.%Y", errors="coerce")
        elif all(col in df.columns for col in ["–î–µ–Ω—å", "–ú—ñ—Å—è—Ü—å", "–†—ñ–∫"]):
            # –ï—Å–ª–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç–∞ —Ä–∞–∑–±–∏—Ç–∞ –Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∏–µ —á–∞—Å—Ç–∏, —Å–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫—É –î–∞—Ç–∞
            df["–î–∞—Ç–∞"] = pd.to_datetime(
                df["–î–µ–Ω—å"].astype(str) + "." + df["–ú—ñ—Å—è—Ü—å"].astype(str) + "." + df["–†—ñ–∫"].astype(str),
                format="%d.%m.%Y", errors="coerce"
            )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        numeric_cols = ["–ß–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—é", "–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑–∞ –≥–æ–¥–∏–Ω—É", "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤"]
        for col in numeric_cols:
            if col in df.columns:
                if df[col].dtype == object:  # –ï—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∞ —Å—Ç—Ä–æ–∫–æ–≤–∞—è
                    df[col] = df[col].astype(str).str.replace(",", ".")
                    df[col] = pd.to_numeric(df[col], errors="coerce")
                else:
                    df[col] = pd.to_numeric(df[col], errors="coerce")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
        percent_cols = ["–í—ñ–¥—Å–æ—Ç–æ–∫ –≤—Ç—Ä–∞—Ç", "–í—ñ–¥—Å–æ—Ç–æ–∫ –±—Ä–∞–∫—É"]
        for col in percent_cols:
            if col in df.columns:
                if df[col].dtype == object:  # –ï—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∞ —Å—Ç—Ä–æ–∫–æ–≤–∞—è
                    df[col] = df[col].astype(str).str.replace(",", ".")
                    df[col] = pd.to_numeric(df[col], errors="coerce")
                else:
                    df[col] = pd.to_numeric(df[col], errors="coerce")
        
        return df
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: {str(e)}")
        return pd.DataFrame()

# ---------------------------
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–ø—è—Ç–Ω–∏—Ü–∞)
# ---------------------------
def count_working_days(start, end):
    num = 0
    current = start
    while current <= end:
        if current.weekday() < 5:
            num += 1
        current += timedelta(days=1)
    return num

# ---------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
# ---------------------------
st.set_page_config(
    page_title="–¢—Ä–µ–Ω–¥ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è",
    page_icon="üìà",
    layout="wide",
)

# ---------------------------
# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
# ---------------------------
cooking_df = load_data("–≤–∞—Ä–∫–∞")
packaging_df = load_data("–§–ê–°–û–í–ö–ê")

if cooking_df.empty and packaging_df.empty:
    st.warning("–î–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ –∞–±–æ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ.")
else:
    # ---------------------------
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    # ---------------------------
    st.title("üìà –¢—Ä–µ–Ω–¥ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è")
    st.markdown("---")
    
    # ---------------------------
    # –í—ã–±–æ—Ä –æ—Ç–¥–µ–ª–∞ –∏ –ø–µ—Ä–∏–æ–¥–∞
    # ---------------------------
    dept_options = []
    if not cooking_df.empty:
        dept_options.append("–í–∞—Ä–∫–∞")
    if not packaging_df.empty:
        dept_options.append("–§–∞—Å–æ–≤–∫–∞")
    if not dept_options:
        st.warning("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≤—ñ–¥–¥—ñ–ª—ñ–≤ –∑ –¥–∞–Ω–∏–º–∏")
    else:
        col1, col2 = st.columns([1, 3])
        
        with col1:
            # –í—ã–±–æ—Ä –æ—Ç–¥–µ–ª–∞
            selected_dept = st.radio("–û–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–¥—ñ–ª:", dept_options)
            
            # –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            interval_options = ["–î–µ–Ω—å", "–¢–∏–∂–¥–µ–Ω—å", "–ú—ñ—Å—è—Ü—å"]
            selected_interval = st.radio("–ß–∞—Å–æ–≤–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª:", interval_options)
            
            # –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –¥–∞—Ç
            min_date = date.today() - timedelta(days=365)  # 1 –≥–æ–¥ –Ω–∞–∑–∞–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            max_date = date.today()
            
            df = cooking_df if selected_dept == "–í–∞—Ä–∫–∞" else packaging_df
            
            if not df.empty and "–î–∞—Ç–∞" in df.columns:
                if pd.notnull(df["–î–∞—Ç–∞"].min()) and pd.notnull(df["–î–∞—Ç–∞"].max()):
                    min_date = max(min_date, df["–î–∞—Ç–∞"].min().date())
                    max_date = min(max_date, df["–î–∞—Ç–∞"].max().date())
            
            date_range = st.date_input(
                "–í–∏–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥:",
                value=(min_date, max_date),
                min_value=min_date,
                max_value=max_date
            )
            
            if len(date_range) == 2:
                start_date, end_date = date_range
                if start_date > end_date:
                    st.error("–î–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø—ñ–∑–Ω—ñ—à–µ –¥–∞—Ç–∏ –∫—ñ–Ω—Ü—è")
            else:
                start_date = min_date
                end_date = max_date
            
            # –§–∏–ª—å—Ç—Ä –¥–ª—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
            if selected_dept == "–í–∞—Ä–∫–∞":
                df = cooking_df
                dept_name = "–≤–∞—Ä–∫–∞"
            else:
                df = packaging_df
                dept_name = "—Ñ–∞—Å–æ–≤–∫–∞"
            
            filtered_df = df[(df["–î–∞—Ç–∞"] >= pd.to_datetime(start_date)) & 
                            (df["–î–∞—Ç–∞"] <= pd.to_datetime(end_date))]
            
            unique_equipment = sorted(filtered_df["–¢–∏–ø –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è"].dropna().unique().tolist())
            if unique_equipment:
                all_equipment = ["–£—Å—ñ"] + unique_equipment
                selected_equipment = st.multiselect(
                    "–û–±–µ—Ä—ñ—Ç—å –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è:", 
                    options=all_equipment, 
                    default=["–£—Å—ñ"]
                )
                if "–£—Å—ñ" not in selected_equipment:
                    filtered_df = filtered_df[filtered_df["–¢–∏–ø –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è"].isin(selected_equipment)]
            else:
                st.warning(f"–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è –¥–ª—è –≤—ñ–¥–¥—ñ–ª—É {selected_dept} –∑–∞ –≤–∏–±—Ä–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥")
        
        with col2:
            if not filtered_df.empty:
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
                if selected_interval == "–î–µ–Ω—å":
                    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–Ω—è–º
                    time_unit = 'D'
                    date_format = '%d.%m.%Y'
                    label = "–∑–∞ –¥–Ω—è–º–∏"
                elif selected_interval == "–¢–∏–∂–¥–µ–Ω—å":
                    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –Ω–µ–¥–µ–ª—è–º
                    time_unit = 'W-MON'  # –ù–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏ —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞
                    date_format = '%d.%m.%Y'
                    label = "–∑–∞ —Ç–∏–∂–Ω—è–º–∏"
                else:  # –ú–µ—Å—è—Ü
                    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –º–µ—Å—è—Ü–∞–º
                    time_unit = 'M'
                    date_format = '%m.%Y'
                    label = "–∑–∞ –º—ñ—Å—è—Ü—è–º–∏"
                
                # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª—É –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
                filtered_df['–ü–µ—Ä—ñ–æ–¥'] = filtered_df['–î–∞—Ç–∞'].dt.to_period(time_unit)
                operations_by_period = filtered_df.groupby(['–ü–µ—Ä—ñ–æ–¥', '–¢–∏–ø –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è']).size().reset_index(name='–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ–π')
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–µ—Ä–∏–æ–¥ –≤ datetime –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
                operations_by_period['–î–∞—Ç–∞'] = operations_by_period['–ü–µ—Ä—ñ–æ–¥'].dt.to_timestamp()
                
                # ---------------------------
                # –ê–Ω–∞–ª–∏–∑ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
                # ---------------------------
                st.subheader(f"–¢—Ä–µ–Ω–¥ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è: {selected_dept} {label}")
                
                # –†–∞—Å—á–µ—Ç —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –∏ —á–∞—Å–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
                period_stats = []
                
                for period in operations_by_period['–ü–µ—Ä—ñ–æ–¥'].unique():
                    if selected_interval == "–î–µ–Ω—å":
                        # –î–ª—è –¥–Ω–µ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ - –æ–¥–∏–Ω –¥–µ–Ω—å
                        period_start = period.start_time.date()
                        period_end = period.start_time.date()
                    elif selected_interval == "–¢–∏–∂–¥–µ–Ω—å":
                        # –î–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ - —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
                        period_start = period.start_time.date()
                        period_end = (period.start_time + timedelta(days=6)).date()
                    else:  # –ú–µ—Å—è—Ü
                        # –î–ª—è –º–µ—Å—è—á–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ - —Å –ø–µ—Ä–≤–æ–≥–æ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞
                        period_start = period.start_time.date()
                        last_day = calendar.monthrange(period_start.year, period_start.month)[1]
                        period_end = date(period_start.year, period_start.month, last_day)
                    
                    # –ü–æ–¥—Å—á–µ—Ç —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –≤ –ø–µ—Ä–∏–æ–¥–µ
                    working_days = count_working_days(period_start, period_end)
                    expected_minutes = working_days * 480  # 8 —á–∞—Å–æ–≤ * 60 –º–∏–Ω—É—Ç
                    
                    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
                    period_data = filtered_df[filtered_df['–ü–µ—Ä—ñ–æ–¥'] == period]
                    
                    # –†–∞—Å—á–µ—Ç –ø–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é
                    for equip, group in period_data.groupby('–¢–∏–ø –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è'):
                        # –ü–æ–¥—Å—á–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–Ω–µ–π —Ä–∞–±–æ—Ç—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
                        distinct_days = group['–î–∞—Ç–∞'].dt.date.nunique()
                        operations_count = len(group)
                        total_minutes = group['–ß–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—é'].sum() if '–ß–∞—Å –Ω–∞ –æ–ø–µ—Ä–∞—Ü—ñ—é' in group.columns else 0
                        
                        # –†–∞—Å—á–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏
                        day_util_pct = (distinct_days / working_days) * 100 if working_days > 0 else 0
                        minutes_util_pct = (total_minutes / expected_minutes) * 100 if expected_minutes > 0 else 0
                        
                        period_stats.append({
                            '–ü–µ—Ä—ñ–æ–¥': period,
                            '–î–∞—Ç–∞': period.start_time,
                            '–¢–∏–ø –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è': equip,
                            '–†–æ–±–æ—á—ñ –¥–Ω—ñ —É –ø–µ—Ä—ñ–æ–¥—ñ': working_days,
                            '–î–Ω—ñ —Ä–æ–±–æ—Ç–∏ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è': distinct_days,
                            '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ—Å—Ç—å (–¥–Ω—ñ), %': day_util_pct,
                            '–ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å —Ä–æ–±–æ—Ç–∏ (—Ö–≤)': total_minutes,
                            '–ü–ª–∞–Ω–æ–≤–∏–π —á–∞—Å —Ä–æ–±–æ—Ç–∏ (—Ö–≤)': expected_minutes,
                            '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ—Å—Ç—å (—á–∞—Å), %': minutes_util_pct,
                            '–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ–π': operations_count
                        })
                
                period_stats_df = pd.DataFrame(period_stats)
                
                # –†–∞—Å—á–µ—Ç –≤—ã—Ä–∞–±–æ—Ç–∫–∏ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–Ω—ã—Ö —à—Ç—É–∫)
                # –í—ã—Ä–∞–±–æ—Ç–∫–∞ = —Å—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –∑–∞–∫–∞–∑ * –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã
                has_productivity_data = '–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑–∞ –≥–æ–¥–∏–Ω—É' in filtered_df.columns
                
                if has_productivity_data:
                    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –∏ —Ç–∏–ø–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã—Ä–∞–±–æ—Ç–∫—É
                    for index, row in period_stats_df.iterrows():
                        period = row['–ü–µ—Ä—ñ–æ–¥']
                        equipment = row['–¢–∏–ø –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è']
                        total_minutes = row['–ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å —Ä–æ–±–æ—Ç–∏ (—Ö–≤)']
                        
                        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
                        equipment_data = filtered_df[
                            (filtered_df['–ü–µ—Ä—ñ–æ–¥'] == period) & 
                            (filtered_df['–¢–∏–ø –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è'] == equipment)
                        ]
                        
                        # –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —á–∞—Å
                        avg_productivity = equipment_data['–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑–∞ –≥–æ–¥–∏–Ω—É'].mean()
                        
                        # –í—ã—Ä–∞–±–æ—Ç–∫–∞ = –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —á–∞—Å * –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –≤ —á–∞—Å–∞—Ö
                        production_units = avg_productivity * (total_minutes / 60)
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º DataFrame
                        period_stats_df.at[index, '–í–∏—Ä–æ–±—ñ—Ç–æ–∫ (—à—Ç)'] = production_units
                
                # ---------------------------
                # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
                # ---------------------------
                # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
                tab_options = ["–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ–π", "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ—Å—Ç—å (–¥–Ω—ñ), %", "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ—Å—Ç—å (—á–∞—Å), %"]
                if has_productivity_data:
                    tab_options.append("–í–∏—Ä–æ–±—ñ—Ç–æ–∫ (—à—Ç)")
                tabs = st.tabs(tab_options)
                
                with tabs[0]:
                    # –ì—Ä–∞—Ñ–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
                    fig_ops = px.line(
                        operations_by_period,
                        x='–î–∞—Ç–∞',
                        y='–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ–π',
                        color='–¢–∏–ø –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è',
                        title=f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ–π –Ω–∞ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—ñ ({selected_dept}) {label}",
                        markers=True
                    )
                    fig_ops.update_layout(
                        xaxis_title="–ü–µ—Ä—ñ–æ–¥",
                        yaxis_title="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ–π",
                        plot_bgcolor='rgba(240,240,240,0.8)',
                        xaxis=dict(showgrid=True, gridwidth=1, gridcolor='rgba(220,220,220,0.8)'),
                        yaxis=dict(showgrid=True, gridwidth=1, gridcolor='rgba(220,220,220,0.8)')
                    )
                    st.plotly_chart(fig_ops, use_container_width=True)
                
                with tabs[1]:
                    # –ì—Ä–∞—Ñ–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ –¥–Ω—è–º
                    fig_days = px.line(
                        period_stats_df,
                        x='–î–∞—Ç–∞',
                        y='–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ—Å—Ç—å (–¥–Ω—ñ), %',
                        color='–¢–∏–ø –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è',
                        title=f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ—Å—Ç—å –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è (–¥–Ω—ñ) ({selected_dept}) {label}",
                        markers=True
                    )
                    fig_days.add_hline(
                        y=100, 
                        line_dash="dash", 
                        line_color="red", 
                        annotation_text="–ú–∞–∫—Å. –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ—Å—Ç—å"
                    )
                    fig_days.update_layout(
                        xaxis_title="–ü–µ—Ä—ñ–æ–¥",
                        yaxis_title="–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ—Å—Ç—å (%)",
                        plot_bgcolor='rgba(240,240,240,0.8)',
                        xaxis=dict(showgrid=True, gridwidth=1, gridcolor='rgba(220,220,220,0.8)'),
                        yaxis=dict(showgrid=True, gridwidth=1, gridcolor='rgba(220,220,220,0.8)', range=[0, 110])
                    )
                    st.plotly_chart(fig_days, use_container_width=True)
                
                with tabs[2]:
                    # –ì—Ä–∞—Ñ–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                    fig_time = px.line(
                        period_stats_df,
                        x='–î–∞—Ç–∞',
                        y='–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ—Å—Ç—å (—á–∞—Å), %',
                        color='–¢–∏–ø –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è',
                        title=f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ—Å—Ç—å –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è (—á–∞—Å) ({selected_dept}) {label}",
                        markers=True
                    )
                    fig_time.add_hline(
                        y=100, 
                        line_dash="dash", 
                        line_color="red", 
                        annotation_text="–ú–∞–∫—Å. –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ—Å—Ç—å"
                    )
                    fig_time.update_layout(
                        xaxis_title="–ü–µ—Ä—ñ–æ–¥",
                        yaxis_title="–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ—Å—Ç—å (%)",
                        plot_bgcolor='rgba(240,240,240,0.8)',
                        xaxis=dict(showgrid=True, gridwidth=1, gridcolor='rgba(220,220,220,0.8)'),
                        yaxis=dict(showgrid=True, gridwidth=1, gridcolor='rgba(220,220,220,0.8)', range=[0, 110])
                    )
                    st.plotly_chart(fig_time, use_container_width=True)
                
                # –í–∫–ª–∞–¥–∫–∞ –≤—ã—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                if has_productivity_data and len(tabs) > 3:
                    with tabs[3]:
                        if '–í–∏—Ä–æ–±—ñ—Ç–æ–∫ (—à—Ç)' in period_stats_df.columns:
                            # –û–∫—Ä—É–≥–ª—è–µ–º –≤—ã—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                            period_stats_df['–í–∏—Ä–æ–±—ñ—Ç–æ–∫ (—à—Ç)'] = period_stats_df['–í–∏—Ä–æ–±—ñ—Ç–æ–∫ (—à—Ç)'].round(0)
                            
                            # –ì—Ä–∞—Ñ–∏–∫ –≤—ã—Ä–∞–±–æ—Ç–∫–∏ (–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–Ω—ã—Ö —à—Ç—É–∫)
                            fig_prod = px.line(
                                period_stats_df,
                                x='–î–∞—Ç–∞',
                                y='–í–∏—Ä–æ–±—ñ—Ç–æ–∫ (—à—Ç)',
                                color='–¢–∏–ø –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è',
                                title=f"–í–∏—Ä–æ–±—ñ—Ç–æ–∫ (—à—Ç) –Ω–∞ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—ñ ({selected_dept}) {label}",
                                markers=True
                            )
                            fig_prod.update_layout(
                                xaxis_title="–ü–µ—Ä—ñ–æ–¥",
                                yaxis_title="–í–∏—Ä–æ–±—ñ—Ç–æ–∫ (—à—Ç)",
                                plot_bgcolor='rgba(240,240,240,0.8)',
                                xaxis=dict(showgrid=True, gridwidth=1, gridcolor='rgba(220,220,220,0.8)'),
                                yaxis=dict(showgrid=True, gridwidth=1, gridcolor='rgba(220,220,220,0.8)')
                            )
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ —Ç–æ—á–µ–∫
                            for i, row in period_stats_df.iterrows():
                                fig_prod.add_annotation(
                                    x=row['–î–∞—Ç–∞'],
                                    y=row['–í–∏—Ä–æ–±—ñ—Ç–æ–∫ (—à—Ç)'],
                                    text=f"{int(row['–í–∏—Ä–æ–±—ñ—Ç–æ–∫ (—à—Ç)'])}",
                                    showarrow=False,
                                    yshift=10,
                                    font=dict(size=10)
                                )
                            
                            st.plotly_chart(fig_prod, use_container_width=True)
                        else:
                            st.warning("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –≤–∏—Ä–æ–±—ñ—Ç–∫—É")
                
                # ---------------------------
                # –¢–∞–±–ª–∏—Ü–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                # ---------------------------
                st.subheader("–î–µ—Ç–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –ø–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ—Å—Ç—ñ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è")
                detailed_df = period_stats_df.copy()
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                detailed_df['–î–∞—Ç–∞'] = detailed_df['–î–∞—Ç–∞'].dt.strftime(date_format)
                detailed_df['–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ—Å—Ç—å (–¥–Ω—ñ), %'] = detailed_df['–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ—Å—Ç—å (–¥–Ω—ñ), %'].round(1)
                detailed_df['–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ—Å—Ç—å (—á–∞—Å), %'] = detailed_df['–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ—Å—Ç—å (—á–∞—Å), %'].round(1)
                
                # –í—ã–±–æ—Ä –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                display_cols = [
                    '–î–∞—Ç–∞', '–¢–∏–ø –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è', '–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ–π', 
                    '–î–Ω—ñ —Ä–æ–±–æ—Ç–∏ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è', '–†–æ–±–æ—á—ñ –¥–Ω—ñ —É –ø–µ—Ä—ñ–æ–¥—ñ', '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ—Å—Ç—å (–¥–Ω—ñ), %',
                    '–ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å —Ä–æ–±–æ—Ç–∏ (—Ö–≤)', '–ü–ª–∞–Ω–æ–≤–∏–π —á–∞—Å —Ä–æ–±–æ—Ç–∏ (—Ö–≤)', '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ—Å—Ç—å (—á–∞—Å), %'
                ]
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É –≤—ã—Ä–∞–±–æ—Ç–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                if has_productivity_data and '–í–∏—Ä–æ–±—ñ—Ç–æ–∫ (—à—Ç)' in period_stats_df.columns:
                    # –û–∫—Ä—É–≥–ª—è–µ–º –≤—ã—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ
                    detailed_df['–í–∏—Ä–æ–±—ñ—Ç–æ–∫ (—à—Ç)'] = detailed_df['–í–∏—Ä–æ–±—ñ—Ç–æ–∫ (—à—Ç)'].round(0).astype(int)
                    display_cols.append('–í–∏—Ä–æ–±—ñ—Ç–æ–∫ (—à—Ç)')
                detailed_df = detailed_df[display_cols].sort_values(['–î–∞—Ç–∞', '–¢–∏–ø –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è'])
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –¥–∞–Ω–Ω—ã–º–∏
                st.dataframe(detailed_df)
            else:
                st.warning(f"–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥–¥—ñ–ª—É {selected_dept} –∑–∞ –≤–∏–±—Ä–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥")